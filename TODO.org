** DONE Tempo variants
** DONE TimeSignature variants
** DONE Simplify tests
** DONE Generic verb for return value with list randomization example
** DONE IO verb with no return type for toLily output via putStrLn to start
** DONE App infrastructure:
*** DONE Applicative OptParse for command-line args starting with YAML config
*** DONE Driver free monad with Env for config YAML, State for random generator
*** DONE Helpers for consuming config YAML.  
** DONE Test Infrastructure
*** DONE Verb to write toLily ouput to file
*** DONE Integrate driver with unit test
 1) get runDriver from Main in exec to Main in text to compile
 2) simple test that fails running lilypond
 3) fix failing test
 4) capture LilyPond stderr and show on failure
*** DONE Integration test infrastructure
 1) generate score with single voice
 2) run lilypond -- can just do "import System.Process .. exitCode <- system $ "lilypond " <> filename ... assert ExistSuccess == exitCode
 3) verify success via exit code (see above)
*** DONE Integration tests
 1) poly voices
 2) voice groups
 3) mixed single, poly, and group voices
** DONE Try consolidating types e.g. VoiceEventList
Failed mainly on simple wrappers for sum types Clef and Tempo,
also for sum types of products, e.g. TimeSignature.  Best solution
would be a mix of singletons Note, Rest, Chord, KeySignature, with
wrappers Cleff, Tempo, TimeSignature.  Seemed like a cleaner design
to stick with uniform wrappers for voice events, maybe with simplified
constructor names.
** DONE Answer random elment from list*
** DONE Answer n random elments from list no repeats
Unless n > length list.  Easy to make infinite list of
random items from a list.  Possible to take e.g. sub-lists
randomly, though there'll be repeats.  Good enough for 
starters.  For lack of repeats, could shuffle first, then
take up to n items which would be without repeats.  
** DONE Interval 
Given list list of Pitch, a (Pitch,Octave) pair, and a list of Int
answer the list of (Pitch,Octave) that corresponds to the transposition
by interval item in [Int].  Note this is a pure routine.
** DONE Config of interval motto
Consist of <digit> or 'r', parses as [Maybe Int] where
Nothing means rest, or absence of an interval.  
** DONE Parse parseLily . toLily for Score
** DONE Config params for sample app
Random mottos in multiple voices.
Mottos specified as collections of equal count lists:
 1) [Maybe Int] (Nothing will mean a Rest)
 2) [Duration]
 3) [Accent]
 3) [Dynamic]
Inputs also include:
  1) Scale
  2) (Pitch,Octave)
** DONE Initialize Random from seed
To determine the seed for getStdGen, in IO:
...
r <- mkStdGen
let s :: [Char] = show r
...
To initialize the seed for StdGen (note, pure!):
let r = read s::StdGen
...
See https://stackoverflow.com/questions/28035728/how-to-obtain-the-seed-used-by-haskells-rng
Need new command-line variable or config param to specify seed.
** DONE Reconsider abandoning MonadRandom in favor of State 
Can initialize global random number generator, then just use
it through MonadRandom.  Change in direction removes the need,
at least for now, of MonadState instead of MonadRandom.
Then stash StdGen in environment to convert it to string (or
just convert it immediately) for use during construction of 
Score later on.  And this didn't turn out to be so hard at all.
Appended StdGen to comment for re-use if desired.
** DONE Generate note list
To generate note list:
 1) pick random element from each of three config lists
 2) convert first list to [Maybe (Pitch,Octave)] using
    mtranspose where Nothing is preserved as Nothing.
 3) zip lists generating note or rest for each
To vary note lists:
 1) Scale
 2) starting (Pitch,Duration)
Don't worry about barring for now.
To generate a SingleVoice, have config data that
specifies voice and clef and use a default time signature.
** DONE Sample app to generate score with simple voice.
** DONE Fix midiInstrumentName
Needed to be Staff.midiInstrument not Voice.midiInstrument
** DONE Config file parsing
*** DONE Eliminate use of initial pitch/octave in transpostion
  When chaining, yields 1+n,n,n... sequences.
*** DONE Simplify octave parsing
  Parsing of octaves is too confusing, change form Lilypond
  parsing to simple +/- integer values with the octave at
  middle C being 0, 1 the octave above, -1 the octave below,
  and etc.
*** DONE Simplify list processing
  Space separations is a bad idea, change to commas for the
  individual lists, with ';' separator between lists, each
  token should accept before and after whitespace, too.
*** DONE Change sequencing of transpositions to use start
Accidental degree of freedom:  chaining motto transpositions
instead of restarting each motto from the same starting pitch.
Means motto shape is preserved but maybe over different starting
pitches based on end pitch from previous motto.
*** DONE Remove type keyword in config file
Means playing with parse order so parses don't interfere
with one another.  Spent the better part of Saturday 
nudging this into shape.
*** DONE Simplify grouping with before, after
First tried '[' and ']' but those parse to Aeson Array,
not string, so substituted '(' and ')'.  Eliminated need
for "only" with eof test.
*** DONE Parallel FromLily as FromConfig
Shouldn't have to parse to ConfigSelector type, then
pick apart with MonadFail handler.  With type class,
should be able just do parseConfig.  Segregate parsers
between lilypond ones and config ones in a new file,
Parsers.hs, have Lilypond instances just refer to 
parseLily<Foo>.  Create Config.hs to parallel Lilly.hs
and have Driver import both.
** DONE Control complexity
  Random groupings of a) pitches, b) rhythms, c) accents
  d) dynamics even for short sequences yields boring soup
  texture.  Create a new generation routine that creates
  n random associations and uses them as entities in the 
  asssembly of a larger texture.
  Or consider a progession where the existing strategy
  is the endpoint with the most complexity, e.g. random
  selection among a) interval/rest, b) duration, c) accent, 
  and d) dynamic.  How to progress from simple to more
  complex?  Consider taking uniform length list of inputs,
  interval/rest + duration + accent + dynamic.  (Can make
  uniform length following a couple rules: durations is 
  determinant, extend interval/rest with 0 transpositions
  for repeating same note, extend accent and dynamic with
  null ~.)  Then start with groupings of two and have random
  permutation of two-element list. Or, does it make sense
  to consider vertial slice of interval/rest + duration +
  accent + dynamic as integral and pick groupings 
  algorithmically?  It seems like it'd be hard to hear
  e.g. shuffled groups of 'n' elements as having anything
  to do with one another.  Say, as opposed to groupings
  of a shuffled list of three elements where each is a
  list of say three or four notes.  Which is where I was
  originally coming from.  In this pattern, a unit is 
  the motif as a list of four lists where the inner lists
  are of interval/rest, duration, accent, and dynamic.
  Or really, that would better be a struct with four
  elements or a four-tuple product.  The defining thing
  would be a constructor that would stretch out or clip
  the interval/rest, accent, and dynamic lists so they
  match the length of the duration list.  
*** DONE Minimal complexity:  same order homophonic
  Minimal complexity would be identical selection of each 
  in all voices, in a loop.  Repeat the exact same motifs
  just from different octave-separted initial notes?  Would
  be unison effect, certainly minimal complexity.  
*** DONE Medium complexity: same order polyphonic
  Rotate each voice by one motive, with as many motives
  as there are voices.  Effect is canon, so you hear 
  periodic repetitions in different octaves of motifs
  in the same order over and over.  Better than unison
  but not much.
*** DONE Random motifs.
  Among 'n' motifs, randomly pick one.  Repeat.  Trick 
  is for motifs to all be of the same rhythmic duration,
  otherwise you get staggered lengths.
  Tricky to lift monad behavior (randomizeList) into
  generation of voices.  Let's say I create a list of
  a list of notes by combining the input config params
  just in the order that they occur in the config file.
  That'd just be length four, which wouldn't be much to
  randomize, so multiply that by the number of repetitions.
  Now shuffle *that* list of list, which is going to be a 
  monadic operation.  Then concat the notes for the voice.
  Another possibility is for reps * count of elements in
  motifs, pick random one and concatenate the result. 
  
  Effect is like chorus where transitional passage comes
  back to restatement of idea without transition, or maybe
  ritornello.  It's grounded and static while continuously
  varying the series of motives between the voices.
*** DONE Fix rest rendering with dynamic change
  If there's a rest and there's a new dynamic, want to
  show dynamic.  Ignore accents.
*** DONE Change pitch/octave extension 
  Currently repeat to make note list match duration
  where needed.  Change to rests.
** TODO Contrary texture
Instead of voices with separate ranges, all voices following
trajectories across same range.  More a chase even, with swarm 
that follows general countour but with each varying in details
of rhythm and exact pitch trajectories.  Model on the murmuration
(not a bad title).  Could even model graphic algorithm with leader
and followers.
Revisit weighted random generation with history.  Start simple e.g.
with just rhythm, e.g. duration.  Pick collection say of three:
1/16, 1/8, 1/4.  Assign weights: 1, 1, 2.  That is, 25%, 25%, 50%
probability on each choice.  To implement, pick random number from
range that is sum 4, e.g. 0..3.  Then create a list of duration
four elements long with 1/16 in first, 1/8 in second, and 1/4 in
last two, e.g.:
> concat $ zipWith replicate [1,1,2] [16,8,4]
[16,8,4,4]
Or $ concat . (zipWith replicate) is
Then use randomElement to pick one, or just wrap in new routine 
randomWeightedElement that takes weights as well as list.  Note
that it would be better to input a list of pairs explicitly to 
avoid truncation that can happen with zip.  And it makes for a 
more succinct implementation:  concatMap (uncurry replicate).
For this, config can just be 
 1) list of weights as ints
 2) list of durations
 3) count of elements to generate
 4) instrument
 5) note.
Or better yet, make a parser that knows (Int,a) pairs and a parser
for a list of them.
Also, consider filling out the percussion instruments so I can use
claves.
** TODO Fill-in/Fade-out  
  To fill-in, introduce voices one-by-one playing 
  single motif, then increase density across all voices.
  Reverse to fade-out.
** TODO Motif Transitions
  - build longer-term transitions on top, e.g. migrate all 
    voices to a destination range: high, middle, low or
    transpose chromatically so different voices or pairs
    of voices are in different keys, or migrate starting
    mottos by cloning and repeating subsections or going
    the opposite direction so texture becomes either more
    sparse or more dense (e.g. by adding / removing rests),
    or units of repetition grow/shrink
  - pair-wise progressions so there's audible variety in
    the texture, e.g. outer voices chiming with inner 
    voices quietly busy
  - increasing sparsity of notes vs. rests to reduce
    texture to pointillistic dots
** TODO Barring
** TODO Non-pitched Percussion Voices


