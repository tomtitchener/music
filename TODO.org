** DONE Tempo variants
** DONE TimeSignature variants
** DONE Simplify tests
** DONE Generic verb for return value with list randomization example
** DONE IO verb with no return type for toLily output via putStrLn to start
** DONE App infrastructure:
*** DONE Applicative OptParse for command-line args starting with YAML config
*** DONE Driver free monad with Env for config YAML, State for random generator
*** DONE Helpers for consuming config YAML.  
** DONE Test Infrastructure
*** DONE Verb to write toLily ouput to file
*** DONE Integrate driver with unit test
 1) get runDriver from Main in exec to Main in text to compile
 2) simple test that fails running lilypond
 3) fix failing test
 4) capture LilyPond stderr and show on failure
*** DONE Integration test infrastructure
 1) generate score with single voice
 2) run lilypond -- can just do "import System.Process .. exitCode <- system $ "lilypond " <> filename ... assert ExistSuccess == exitCode
 3) verify success via exit code (see above)
*** DONE Integration tests
 1) poly voices
 2) voice groups
 3) mixed single, poly, and group voices
** DONE Try consolidating types e.g. VoiceEventList
Failed mainly on simple wrappers for sum types Clef and Tempo,
also for sum types of products, e.g. TimeSignature.  Best solution
would be a mix of singletons Note, Rest, Chord, KeySignature, with
wrappers Cleff, Tempo, TimeSignature.  Seemed like a cleaner design
to stick with uniform wrappers for voice events, maybe with simplified
constructor names.
** DONE Answer random elment from list*
** DONE Answer n random elments from list no repeats
Unless n > length list.  Easy to make infinite list of
random items from a list.  Possible to take e.g. sub-lists
randomly, though there'll be repeats.  Good enough for 
starters.  For lack of repeats, could shuffle first, then
take up to n items which would be without repeats.  
** DONE Interval 
Given list list of Pitch, a (Pitch,Octave) pair, and a list of Int
answer the list of (Pitch,Octave) that corresponds to the transposition
by interval item in [Int].  Note this is a pure routine.
** DONE Config of interval motto
Consist of <digit> or 'r', parses as [Maybe Int] where
Nothing means rest, or absence of an interval.  
** DONE Parse parseLily . toLily for Score
** DONE Config params for sample app
Random mottos in multiple voices.
Mottos specified as collections of equal count lists:
 1) [Maybe Int] (Nothing will mean a Rest)
 2) [Duration]
 3) [Accent]
 3) [Dynamic]
Inputs also include:
  1) Scale
  2) (Pitch,Octave)
** DONE Initialize Random from seed
To determine the seed for getStdGen, in IO:
...
r <- mkStdGen
let s :: [Char] = show r
...
To initialize the seed for StdGen (note, pure!):
let r = read s::StdGen
...
See https://stackoverflow.com/questions/28035728/how-to-obtain-the-seed-used-by-haskells-rng
Need new command-line variable or config param to specify seed.
** DONE Reconsider abandoning MonadRandom in favor of State 
Can initialize global random number generator, then just use
it through MonadRandom.  Change in direction removes the need,
at least for now, of MonadState instead of MonadRandom.
Then stash StdGen in environment to convert it to string (or
just convert it immediately) for use during construction of 
Score later on.  And this didn't turn out to be so hard at all.
Appended StdGen to comment for re-use if desired.
** DONE Generate note list
To generate note list:
 1) pick random element from each of three config lists
 2) convert first list to [Maybe (Pitch,Octave)] using
    mtranspose where Nothing is preserved as Nothing.
 3) zip lists generating note or rest for each
To vary note lists:
 1) Scale
 2) starting (Pitch,Duration)
Don't worry about barring for now.
To generate a SingleVoice, have config data that
specifies voice and clef and use a default time signature.
** DONE Sample app to generate score with simple voice.
** DONE Fix midiInstrumentName
Needed to be Staff.midiInstrument not Voice.midiInstrument
** DONE Config file parsing
*** DONE Eliminate use of initial pitch/octave in transpostion
  When chaining, yields 1+n,n,n... sequences.
*** DONE Simplify octave parsing
  Parsing of octaves is too confusing, change form Lilypond
  parsing to simple +/- integer values with the octave at
  middle C being 0, 1 the octave above, -1 the octave below,
  and etc.
*** DONE Simplify list processing
  Space separations is a bad idea, change to commas for the
  individual lists, with ';' separator between lists, each
  token should accept before and after whitespace, too.
*** DONE Change sequencing of transpositions to use start
Accidental degree of freedom:  chaining motto transpositions
instead of restarting each motto from the same starting pitch.
Means motto shape is preserved but maybe over different starting
pitches based on end pitch from previous motto.
*** DONE Remove type keyword in config file
Means playing with parse order so parses don't interfere
with one another.  Spent the better part of Saturday 
nudging this into shape.
*** DONE Simplify grouping with before, after
First tried '[' and ']' but those parse to Aeson Array,
not string, so substituted '(' and ')'.  Eliminated need
for "only" with eof test.
*** DONE Parallel FromLily as FromConfig
Shouldn't have to parse to ConfigSelector type, then
pick apart with MonadFail handler.  With type class,
should be able just do parseConfig.  Segregate parsers
between lilypond ones and config ones in a new file,
Parsers.hs, have Lilypond instances just refer to 
parseLily<Foo>.  Create Config.hs to parallel Lilly.hs
and have Driver import both.
** DONE Control complexity
  Random groupings of a) pitches, b) rhythms, c) accents
  d) dynamics even for short sequences yields boring soup
  texture.  Create a new generation routine that creates
  n random associations and uses them as entities in the 
  asssembly of a larger texture.
  Or consider a progession where the existing strategy
  is the endpoint with the most complexity, e.g. random
  selection among a) interval/rest, b) duration, c) accent, 
  and d) dynamic.  How to progress from simple to more
  complex?  Consider taking uniform length list of inputs,
  interval/rest + duration + accent + dynamic.  (Can make
  uniform length following a couple rules: durations is 
  determinant, extend interval/rest with 0 transpositions
  for repeating same note, extend accent and dynamic with
  null ~.)  Then start with groupings of two and have random
  permutation of two-element list. Or, does it make sense
  to consider vertial slice of interval/rest + duration +
  accent + dynamic as integral and pick groupings 
  algorithmically?  It seems like it'd be hard to hear
  e.g. shuffled groups of 'n' elements as having anything
  to do with one another.  Say, as opposed to groupings
  of a shuffled list of three elements where each is a
  list of say three or four notes.  Which is where I was
  originally coming from.  In this pattern, a unit is 
  the motif as a list of four lists where the inner lists
  are of interval/rest, duration, accent, and dynamic.
  Or really, that would better be a struct with four
  elements or a four-tuple product.  The defining thing
  would be a constructor that would stretch out or clip
  the interval/rest, accent, and dynamic lists so they
  match the length of the duration list.  
*** DONE Minimal complexity:  same order homophonic
  Minimal complexity would be identical selection of each 
  in all voices, in a loop.  Repeat the exact same motifs
  just from different octave-separted initial notes?  Would
  be unison effect, certainly minimal complexity.  
*** DONE Medium complexity: same order polyphonic
  Rotate each voice by one motive, with as many motives
  as there are voices.  Effect is canon, so you hear 
  periodic repetitions in different octaves of motifs
  in the same order over and over.  Better than unison
  but not much.
*** DONE Random motifs.
  Among 'n' motifs, randomly pick one.  Repeat.  Trick 
  is for motifs to all be of the same rhythmic duration,
  otherwise you get staggered lengths.
  Tricky to lift monad behavior (randomizeList) into
  generation of voices.  Let's say I create a list of
  a list of notes by combining the input config params
  just in the order that they occur in the config file.
  That'd just be length four, which wouldn't be much to
  randomize, so multiply that by the number of repetitions.
  Now shuffle *that* list of list, which is going to be a 
  monadic operation.  Then concat the notes for the voice.
  Another possibility is for reps * count of elements in
  motifs, pick random one and concatenate the result. 
  
  Effect is like chorus where transitional passage comes
  back to restatement of idea without transition, or maybe
  ritornello.  It's grounded and static while continuously
  varying the series of motives between the voices.
*** DONE Fix rest rendering with dynamic change
  If there's a rest and there's a new dynamic, want to
  show dynamic.  Ignore accents.
*** DONE Change pitch/octave extension 
  Currently repeat to make note list match duration
  where needed.  Change to rests.
** DONE Crescendo/Decrescendo
To do swells over a tremolo or generally, need notation.  Can be a generic term
"swell" with values cresc, decresc, end, hairpin.  Or better yet I just need extra
values for dynamic that are cresc, decresc, end, and hairpin (espressivo) for
a swell on a single pitch.  Except I may want both dynamic and crescendo for the
same note, or dynamic and decrescendo for the same note.  I could have a list, 
but the actual instances of dynamic will be rare--and I'll have to get the order
of dynamic and swell correct.  So probably it makes better sense to keep them
separate.  Except, I forget: order varies between crescendo vs. decrescendo.
If there's a dynamic and a crescendo then that's the order.  But if there's a
dynamic and a decrescendo then you want the decrescendo first and the note second.
So really it would be better to have a pair as you can only ever have two, and
there's a handy NoDynamic and NoSwell for the empty cases.  Except that's not
really necessary, as I can customize ToLily instances by type and FromLily by
expected order.  But that only works (trivially) in the ToLily part.  The parsing
is harder.  The order of swell/dynamic vs. dynamic/swell means you can't use 
applicative style because the order in the containers e.g. Note has only one
shape.  I need a way to say parse swell + dynamic OR dynamic + swell but 
present them always in the order first dynamic then swell.  And while you can
trivially do a pair of (Either Swell Dynamic), you're still left with the
translation of that to Dynamic then Swell.  There is Text.Parsec.Perm that
I may be able to leverage.  But from my reading of the documentation, *all*
the fields of e.g. Note would be part of the mix, just so swell and dynamic
could be out-of-order.  The the parser would actually be much more general
than needed--would accept a much larger variety of input.  Seems like overkill,
like I'm just missing some part of the parser architecture.  

Simply god awful failure trying to force order of e.g. ">p" vs: "p<" which it
turns out, doesn't even matter to Lilypond!  Surprisingly difficult to create
a parser that handles two orders for the same type result.  In this case, I
wanted the result to be (Dynamic,Swell) but the order to occur in either order.
But as it turns out Lilypond takes "g''8.->\>\p" and g''8.->\p\> and treats 
them the same way!  

parseDynSwellPr :: Parser (Dynamic,Swell)
-- type checks but doesn't work for e.g. "\\f\\<", parses as (Forte,NoSwell)
parseDynSwellPr = try ((flip (,)) <$> parseSwell <*> parseDynamic) <|> try ((,) <$> parseDynamic <*> parseSwell)
-- type checks but doesn't work for e.g. "\\>\\f", parses as (NoDynamic,Decrescendo)
--parseDynSwellPr = try ((,) <$> parseDynamic <*> parseSwell) <|> try (flip (,) <$> parseSwell <*> parseDynamic)

So really, having a separate Dynamic and Swell is fine and it's just up to me
to get the order right.  Having both Dynamic and Swell means Lilypond will 
always render the dynamic first and the swell second.  The swell continues
until the next dynamic (maybe with another swell) or until a stop swell indicator.

** DONE Tremolo
Lilypond notation is :<N> where N is [8,16,32,64] for barring
of tremolo.  Though that sounds like it's a fail for Midi rendering.
So the way to encode it instead would be \repeat tremolo <reps> <note>[octave]<barring>
where reps * barring gives total duration, so \repeat tremolo 4 c16 is a quarter note
duration because 4 sixteenths gives a quarter note.  That's a little awkward.  First
of all, the tremolo indication will have to carry the barring: [8|16|32|64|128].  Then
there'll be a computation given a) the duration (1,1.,2,2.,4,4.,8,8. etc.] and b) the
barring, the duration will have to be evenly divisible by the barring.  It's tempting
to forgo the barring and just compute a lowest division maybe with some floor, like
e.g. sixteenths, that could be a global constant even.
But consider repeating a single note is only the minimal tremolo.  More usual is 
tremolo between two chords or, probably for marimba, between two pairs of notes.
And that's accommodated by the \repeat syntax.  But that encompasses multiple 
pitches, which means that it's probably better to have Tremolo as another VoiceEvent.
It wouldn't make any sense to use tremolo for a solo non-percussion voice, but that
doesn't have to be captured by the type.  The Tremolo VoiceEvent would include a 
list of notes of length one or two only.  Or better yet a [ [(Pitch,Octave)] ] of 
length one or two.  A tremolo on a single note would be just [ [(Pitch,Octave)] ],
over two single notes [ [(Pitch,Octave)], [(Pitch,Octave)] ], and etc.  Or another
possibility would be ([(Pitch,Octave)],[(Pitch,Octave)]) where a single note tremelo
would be represented as an empty list in the second element of the pair. Then it would
need Duration, and Dynamic but probably not Accent.  Finally, it could include a 
Maybe Duration for the barring, where Nothing would mean selecting a barring to fit
the Duration with a minimal value of e.g. 16.  And the code would compute the reps
value for the \repeat tremolo <reps> { '<' <note ... '>'<barring> ...}.
** DONE More Tremolo
For multiple-note tremolos, you can have a dynamic and/or swell associated
with each note:  \repeat tremolo 32 {<c' e'>\64\< <a' c''>64\f\>}. 
So really I Tremolo should be made up either a note or a pair of (maybe 
one-note) chords.
Tricky bits:  tried having two chords with different durations, didn't make
any sense in terms of the notation.  Left type alone with comment that two
durations should be identical because then it's just two chords.  Otherwise
it'd have to be two of a special type of Note without the duration then a 
single duration.  Don't forget to make a smart constructor for Tremolo that
checks the two Durations match.  
Lilypond renders accents, swells, and articulation even though articulations
aren't particularly meaningful.  Swells and dynamics are nice to vary over
course of the tremolo though unfortunately Lilypond doesn't render them via
Midi.
Lilypond also renders ties, which also aren't really meaningful.  Could 
rewrite as two tuples of (Note,Octave,Dynamic,Swell) plus Duration to make 
things explicit at the type level.
Also rewrote computation for barring of chords to avoid always jacking up
the barring to 128th notes.
Note for chords each note gets the total duration, which can be confusing.
The notes tremolo'd together make up a sustained note that lasts the duration
of one of the notated chords.
There's examples to show flipping the tremolo across staves if I ever need
it.
** DONE NonEmpty Lists
Follow Alexis King suggestion about non-empty lists as a type:
  https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/
Has the benefit of making non-empty lists visible to the type checker.
On parsing still run-time detection but part of parsing from config
data to internal data types vs. explicit check (which I wasn't doing
anyway).
Experience implementing it:  headed into trouble with monoid instance
for mappend of motto components, so there's some residual ordinary 
list processing in Compose.hs.  Points to usefulness of empty lists
when processing lists.
** TODO Example Piano Score
What components from Types.hs to capture for functions that
generate textures?  Start simple.  Say a piano score of pairs
of ascending/descending intervals:  overlapping, synchronous,
echo.  So far:  composing routines are built around idea of a
motto generated from lists of intervals/rests, durations, accents,
and dynamics.  All driven by configuration information in YAML
file, interpeted via (only) Main.hs through functions in Compose.hs.
So to follow that pattern, I want a new config that specifies at a
minimum: instrument, scale, matching lists of intervals and durations,
and a low and a high octave.
*** DONE Configuration: instr, key, scale, low octave, high octave,
*** DONE Arpeggio generator: scale -> interval -> duration -> start octave -> finish octave
*** TODO Rendering for piano
Single voice across multiple staves?  Dynamic clef that changes with range?
Note you don't want back-to-back clef changes at boundary intervals, should let
range escape to a couple leger lines before switching?  
I'm so thoroughly rooted in the solo part like you get for a trumpet, I haven't
really considered what it would take to capture e.g. a multiphonic instrument
like piano where typically you both bass and treble for left and right hands.
Start with a pass to insert cleffs in a voice event list with some sort of 
heuristic to capture e.g. five notes in row that exceed teh leger line limit
for the cleff you're currently in.  Use the four clefs Bass8VB, Bass, Treble, 
Treble8VA that correspond to FifteenVBOct, EightVBOct, COct, and EightVAOct.
Note that the voice event list may contain non-note items e.g. rests or a 
tempo, or key or time signature, so I can't just have a fixed-length silo to
keep my place--although I should be able to have a reasonable-length silo if
I just pad it.  Conceptually, I'm copying over a list, periodically inserting
a clef now and then.  Note silo is really like a deque.  What's the equivalent
Haskell data type?
So there'll be phases and a state:
Phases:
  Initial:  copy over from the source list to fill up the silo
  Running:  a) analyze the silo to determine what the clef should be
            b) if the new clef is different from the current clef, then output 
               the new clef,
            c) output the first event and all subsequent events up to the
               next note event
            d) input new events to the end of the silo up to the first note 
               or the silo is full
            e) repeat until the input is empty (advance to Terminal)
  Terminal: drain the silo
State is just Clef
  Initial:  Treble (might as well start somewhere)
  Running:  computed Clef
Point is to have a running average with an embargoed list of notes so I can
slip a clef in back where it's needed when I detect as I go along that the
average pitch belongs in a new clef.
** TODO Re-Architect Driver
First: ToLily doesn't need to be monadic at all, and can just be a 
library routine.
Second:, FromLily and FromConfig both use monadic parsers, but have 
nothing to do with IO and there's no reason for them to be encapsulated, 
either.  The only thing that happens in Driver is pasing in the path to 
the config file as an DriverEnv.
Third: the random behavior all takes place with respect to MonadRandom,
and can probably be run under the IO monad without the need of the 
runDriver wrapper and free monad entirely.
Fourth: generation of actual LilyPond file is just writeFile in IO.
Really, there's no need for the free Monad without a grammar that's
recursive in its own right.  But none of my syntax recurs, so all I
get is composability throught the bind and sequence operators, which
I don't actual make use of anyway.
** TODO Rethink fold vs. unfold.
The normative reference for free monad is a catamorphism e.g. fold.
Reduction through evaluation of an expression captured via a syntax
tree to a value.  The closest I come to this is the mapping of a 
structured type like Score to a simple type like a String, with all
the LilyPond syntax embodied in it.
But when it comes to composition what I'm really talking about is 
unfolding, an anamorphism, or a comonad, where there's some pre-defined
stopping point to the unraveling or adumbration of the unfolding e.g.
at some iteration count.  That's the generative process that yields
either the Score or some abstraction that is then mapped to the Score
before being reduced to a LilyPond string.
The mental block I've experienced even back during Cisco days results
from this basic inversion of the abstraction, the fact that what I seek
is the unfold prior to the fold, the anamorphism prior to the catamorphism.
** TODO Tremolo Sample Texture
Sustained one, two, and four-note tremolos seems reasonable, so long
as the four-note tremolos are organized 2+2 and there's not too much
distance between the two pitches.  From looking at a couple videos,
it seems like a sixth is reasonable, even in both hands with rolls
or tremolos for the sustained effect.  So assuming four marimbas,
there's a range that starts with single notes per marmimba for a
total of four pitches through double notes in both hands for a 
total of 16 pitches.  What appeals to me is clusters of sixths
paired with octaves.  So maybe a starting point would be interleaved
octaves and sixths each with independent swells, though I'm going to
have to hand-annotate those in Logic myself.
Consider fifth cycles up via major sixths:
1) c  eb + octave ab
2) g  bb + octave eb
3) d  f  + octave bb
4) a  c  + octave f
...
Other way around moves down by minor thirds:
1) c  eb + octave ab
2) a   c + octave f
3) fs  a + octave d
4) ds fs + octave b
...
Either way cross over of minor second/major seventh
will add some friction.
Starting initial descending major sixth as input, e.g. c + eb:
1) produce octaves at lower fifth: ab + ab
2) using ab as next point, produce new descending sixths
   starting from half step up:  a + c
3) repeat with those pitches as next stage.
Abstract: octaves go up half step vs. down half step.
Octave selection has to vary so tonal center doesn't
uniformly migrate.
Trick would be to have generator that adds complexity on successive
iterations.  Pattern for generator is comonad, if you want to generalize
beyond lists (e.g. unfoldr).  In my mind, first generation would be
four marimbas, one sustained pitch per marimaba, next generation would
be four marimbas, two systained pitches per marimaba, final generation
four marimbas, four systained pitches per marimba.  Each generation 
would be complete cycle of fifths but more dense texture.  Final
generation would be easier to map as upper and lower sixths, with
outer notes as octave, inner notes as sixths.  Middle generation 
would be either octaves and sixths per player or lower and uppper
sixths per player.  
Original plan was overlap, e.g. first sixths, then octaves, then
sixths, then octaves staggered.  Joins can be overlapping fifth
progressions on top of overlapping sixths and octaves.

But before that I need something conceptually simpler to build upon.
Start will be scaffolding of pitch progressions expressed as intervals,
defining characterstics:

a) starting pitch
b) interval: major sixth lower
c) interval: major fifth lower
d) interval: two octaves higher 

Note: sustaining c (starting pitch) as pivot 
to new  lower-half of major sixth gives continuity
to minor third progression.

** TODO Finish non-pitched percussion voice rendering.
** TODO Install Docker, install lilypond, run test under Docker
Should be possible to execute with GitHub integration.
** TODO Contrary texture
Instead of voices with separate ranges, all voices following
trajectories across same range.  More a chase even, with swarm 
that follows general countour but with each varying in details
of rhythm and exact pitch trajectories.  Model on the murmuration
(not a bad title).  Could even model graphic algorithm with leader
and followers.
Revisit weighted random generation with history.  Start simple e.g.
with just rhythm, e.g. duration.  Pick collection say of three:
1/16, 1/8, 1/4.  Assign weights: 1, 1, 2.  That is, 25%, 25%, 50%
probability on each choice.  To implement, pick random number from
range that is sum 4, e.g. 0..3.  Then create a list of duration
four elements long with 1/16 in first, 1/8 in second, and 1/4 in
last two, e.g.:
> concat $ zipWith replicate [1,1,2] [16,8,4]
[16,8,4,4]
Or $ concat . (zipWith replicate) is
Then use randomElement to pick one, or just wrap in new routine 
randomWeightedElement that takes weights as well as list.  Note
that it would be better to input a list of pairs explicitly to 
avoid truncation that can happen with zip.  And it makes for a 
more succinct implementation:  concatMap (uncurry replicate).
For this, config can just be 
 1) list of weights as ints
 2) list of durations
 3) count of elements to generate
 4) instrument
 5) note.
Or better yet, make a parser that knows (Int,a) pairs and a parser
for a list of them.
Also, consider filling out the percussion instruments so I can use
claves.
** TODO Fill-in/Fade-out  
  To fill-in, introduce voices one-by-one playing 
  single motif, then increase density across all voices.
  Reverse to fade-out.
** TODO Motif Transitions
  - build longer-term transitions on top, e.g. migrate all 
    voices to a destination range: high, middle, low or
    transpose chromatically so different voices or pairs
    of voices are in different keys, or migrate starting
    mottos by cloning and repeating subsections or going
    the opposite direction so texture becomes either more
    sparse or more dense (e.g. by adding / removing rests),
    or units of repetition grow/shrink
  - pair-wise progressions so there's audible variety in
    the texture, e.g. outer voices chiming with inner 
    voices quietly busy
  - increasing sparsity of notes vs. rests to reduce
    texture to pointillistic dots
** TODO Barring


